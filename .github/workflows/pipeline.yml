name: Complete pipeline

on: push

jobs:
    build:
        timeout-minutes: 5
        runs-on: ${{ matrix.os }}

        strategy:
            matrix:
                # As the CI seems to have high run times, limit it to ubuntu-latest
                # os: [ubuntu-latest, windows-latest, macos-latest]
                os: [ubuntu-latest]
            fail-fast: false

        steps:
            - uses: actions/checkout@v2
            - uses: actions/setup-node@v2
              with:
                  node-version: '16'
            - name: Cache node modules
              uses: actions/cache@v2
              id: cache-node-modules
              env:
                  cache-name: cache-node-modules
              with:
                  path: |
                      node_modules
                      shared/node_modules
                      frontend/node_modules
                      backend/node_modules
                  key: ${{ secrets.CACHE_VERSION }}-${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('package-lock.json') }}
            - name: Cache shared/dist
              uses: actions/cache@v2
              id: cache-shared-dist
              env:
                  cache-name: cache-shared-dist
              with:
                  path: shared/dist
                  key: ${{ secrets.CACHE_VERSION }}-${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('shared/src/**') }}
            - name: Setup project
              if: steps.cache-node-modules.outputs.cache-hit != 'true'
              run: npm run setup:ci
            - name: Build shared
              run: cd shared && npm run build && cd ..

    lint:
        timeout-minutes: 2
        runs-on: ${{ matrix.os }}

        needs: build

        strategy:
            matrix:
                os: [ubuntu-latest]
            fail-fast: false

        steps:
            - uses: actions/checkout@v2
            - uses: actions/setup-node@v2
              with:
                  node-version: '16'
            - name: Cache node modules
              uses: actions/cache@v2
              id: cache-node-modules
              env:
                  cache-name: cache-node-modules
              with:
                  path: |
                      node_modules
                      shared/node_modules
                      frontend/node_modules
                      backend/node_modules
                  key: ${{ secrets.CACHE_VERSION }}-${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('package-lock.json') }}
            - name: Cache shared/dist
              uses: actions/cache@v2
              id: cache-shared-dist
              env:
                  cache-name: cache-shared-dist
              with:
                  path: shared/dist
                  key: ${{ secrets.CACHE_VERSION }}-${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('shared/src/**') }}
            - name: Run ESLint
              run: npm run lint
            - name: Run Prettier
              if: always()
              run: npm run prettier:check

    dependencies:
        timeout-minutes: 10
        runs-on: ${{ matrix.os }}

        needs: build

        continue-on-error: true

        strategy:
            matrix:
                os: [ubuntu-latest]
            fail-fast: false

        steps:
            - uses: actions/checkout@v2
            - uses: actions/setup-node@v2
              with:
                  node-version: '16'
            - name: Cache node modules
              uses: actions/cache@v2
              id: cache-node-modules
              env:
                  cache-name: cache-node-modules
              with:
                  path: |
                      node_modules
                      shared/node_modules
                      frontend/node_modules
                      backend/node_modules
                  key: ${{ secrets.CACHE_VERSION }}-${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('package-lock.json') }}
            - name: Cache shared/dist
              uses: actions/cache@v2
              id: cache-shared-dist
              env:
                  cache-name: cache-shared-dist
              with:
                  path: shared/dist
                  key: ${{ secrets.CACHE_VERSION }}-${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('shared/src/**') }}
            - name: Audit root
              if: always()
              run: npm audit
            - name: Audit shared
              if: always()
              run: cd shared; npm audit; cd ..
            - name: Audit frontend
              if: always()
              run: cd frontend; npm audit; cd ..
            - name: Audit backend
              if: always()
              run: cd backend; npm audit; cd ..

    test:
        timeout-minutes: 4
        runs-on: ${{ matrix.os }}

        needs: build

        services:
            postgres:
                image: postgres:14
                env:
                    POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
                    POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
                    POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
                ports:
                    - 5432:5432
                # Set health checks to wait until postgres has started
                options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5

        strategy:
            matrix:
                # As the CI seems to have high run times, limit it to ubuntu-latest
                # os: [ubuntu-latest, windows-latest, macos-latest]
                os: [ubuntu-latest]
            fail-fast: false

        steps:
            - uses: actions/checkout@v2
            - uses: actions/setup-node@v2
              with:
                  node-version: '16'
            - name: Cache node modules
              uses: actions/cache@v2
              id: cache-node-modules
              env:
                  cache-name: cache-node-modules
              with:
                  path: |
                      node_modules
                      shared/node_modules
                      frontend/node_modules
                      backend/node_modules
                  key: ${{ secrets.CACHE_VERSION }}-${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('package-lock.json') }}
            - name: Cache shared/dist
              uses: actions/cache@v2
              id: cache-shared-dist
              env:
                  cache-name: cache-shared-dist
              with:
                  path: shared/dist
                  key: ${{ secrets.CACHE_VERSION }}-${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('shared/src/**') }}
            - name: Create .env
              run: cat ./.env.example | sed -e "s/^DFM_DB_USER=.*$/DFM_DB_USER=${{ secrets.POSTGRES_USER }}/" | sed -e "s/^# DFM_DB_PASSWORD=.*$/DFM_DB_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}/" | sed -e "s/^DFM_DB_NAME=.*$/DFM_DB_NAME=${{ secrets.POSTGRES_DB }}/" | sed -e "s/^DFM_DB_HOST=.*$/DFM_DB_HOST=localhost/" > ./.env
            - name: Run migrations
              run: cd backend && npm run migration:run && cd ..
            - name: Run Backend Tests
              run: cd backend && npm run test:ci; cd ..
              if: always()
            - name: Run Frontend Tests
              run: cd frontend && npm run test:ci; cd ..
              if: always()
            - name: Run Shared Tests
              run: cd shared && npm run test:ci; cd ..
              if: always()
            - name: Merge coverage
              run: npm run merge-coverage
              if: always()
            - name: Upload coverage
              uses: actions/upload-artifact@v2
              if: always()
              with:
                  name: coverage-output
                  path: coverage

    cypress:
        timeout-minutes: 4
        runs-on: ${{ matrix.os }}

        needs: build

        services:
            postgres:
                image: postgres:14
                env:
                    POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
                    POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
                    POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
                ports:
                    - 5432:5432
                # Set health checks to wait until postgres has started
                options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5

        strategy:
            matrix:
                os: [ubuntu-latest]
            fail-fast: false

        # Don't pull LFS to reduce bandwidth usage
        steps:
            - uses: actions/checkout@v2
            #   with:
            #       lfs: 'true'
            - name: checkoutLFS
              uses: actions/checkout@v2
            # - run: git lfs pull
            - uses: actions/setup-node@v2
              with:
                  node-version: '16'
            - name: Cache node modules
              uses: actions/cache@v2
              id: cache-node-modules
              env:
                  cache-name: cache-node-modules
              with:
                  path: |
                      node_modules
                      shared/node_modules
                      frontend/node_modules
                      backend/node_modules
                  key: ${{ secrets.CACHE_VERSION }}-${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('package-lock.json') }}
            - name: Cache shared/dist
              uses: actions/cache@v2
              id: cache-shared-dist
              env:
                  cache-name: cache-shared-dist
              with:
                  path: shared/dist
                  key: ${{ secrets.CACHE_VERSION }}-${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('shared/src/**') }}
            - name: Cache Cypress binary
              uses: actions/cache@v2
              id: cache-cypress
              with:
                  path: ~/.cache/Cypress
                  key: cypress-${{ secrets.CACHE_VERSION }}-${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('package-lock.json') }}
            - name: Install Cypress
              if: steps.cache-cypress.outputs.cache-hit != 'true'
              run: npm run cy:install
            - name: Create .env
              run: cat ./.env.example | sed -e "s/^DFM_DB_USER=.*$/DFM_DB_USER=${{ secrets.POSTGRES_USER }}/" | sed -e "s/^# DFM_DB_PASSWORD=.*$/DFM_DB_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}/" | sed -e "s/^DFM_DB_NAME=.*$/DFM_DB_NAME=${{ secrets.POSTGRES_DB }}/" | sed -e "s/^DFM_DB_HOST=.*$/DFM_DB_HOST=localhost/" > ./.env
            - name: Run migrations
              run: cd backend && npm run migration:run && cd ..
            - name: Run Cypress
              uses: cypress-io/github-action@v2
              with:
                  start: npm run start:all
                  command: npm run cy:ci
                  wait-on: 'http://localhost:4200/health, http://localhost:3201/api/health'
            - name: Archive cypress
              if: always()
              uses: actions/upload-artifact@v2
              with:
                  name: cypress-output
                  path: frontend/cypress-visual-screenshots

    deploy-dev:
        timeout-minutes: 10
        runs-on: ubuntu-latest

        needs: [test, cypress]

        if: github.ref == 'refs/heads/dev'

        strategy:
            matrix:
                os: [ubuntu-latest]
            fail-fast: false

        steps:
            - uses: actions/checkout@v2
              with:
                  lfs: 'true'
            - name: checkoutLFS
              uses: actions/checkout@v2
            - run: git lfs pull
            # Source: https://docs.docker.com/ci-cd/github-actions/
            - name: Login to docker
              uses: docker/login-action@v1
              with:
                  username: ${{ secrets.DOCKER_HUB_USERNAME }}
                  password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
            - name: Build and push
              uses: docker/build-push-action@v2
              with:
                  context: .
                  file: docker/Dockerfile
                  push: true
                  tags: ${{ secrets.DOCKER_HUB_USERNAME }}/dfm:dev

    deploy-main:
        timeout-minutes: 10
        runs-on: ubuntu-latest

        needs: [test, cypress]

        if: github.ref == 'refs/heads/main'

        strategy:
            matrix:
                os: [ubuntu-latest]
            fail-fast: false

        steps:
            - uses: actions/checkout@v2
              with:
                  lfs: 'true'
            - name: checkoutLFS
              uses: actions/checkout@v2
            - run: git lfs pull
            # Source: https://docs.docker.com/ci-cd/github-actions/
            - name: Login to docker
              uses: docker/login-action@v1
              with:
                  username: ${{ secrets.DOCKER_HUB_USERNAME }}
                  password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
            - name: Build and push
              uses: docker/build-push-action@v2
              with:
                  context: .
                  file: docker/Dockerfile
                  push: true
                  tags: ${{ secrets.DOCKER_HUB_USERNAME }}/dfm:latest
